basePath: /api/v1
definitions:
  models.AccessTokenResponse:
    properties:
      accessToken:
        type: string
      expiresIn:
        type: integer
    required:
    - accessToken
    - expiresIn
    type: object
  models.Class:
    properties:
      count:
        type: integer
      id:
        type: integer
      name:
        type: string
      subjects:
        items:
          $ref: '#/definitions/models.Subject'
        type: array
    required:
    - count
    - id
    - name
    - subjects
    type: object
  models.Contact:
    properties:
      content:
        type: string
      email:
        type: string
      fullName:
        type: string
      title:
        type: string
    required:
    - content
    - email
    - fullName
    - title
    type: object
  models.Course:
    properties:
      category:
        type: string
      classId:
        type: integer
      description:
        type: string
      id:
        type: integer
      instructor:
        type: string
      lessons:
        items:
          $ref: '#/definitions/models.Lesson'
        type: array
      price:
        type: number
      subjectId:
        type: integer
      thumbnailUrl:
        type: string
      title:
        type: string
    required:
    - category
    - classId
    - description
    - id
    - instructor
    - lessons
    - price
    - subjectId
    - thumbnailUrl
    - title
    type: object
  models.CourseListResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/models.Course'
        type: array
      paging:
        $ref: '#/definitions/models.Paging'
    required:
    - data
    - paging
    type: object
  models.CreateUserRequest:
    properties:
      avatar:
        type: string
      dateOfBirth:
        type: string
      email:
        type: string
      fullName:
        type: string
      gender:
        $ref: '#/definitions/models.UserGender'
      password:
        minLength: 6
        type: string
      role:
        $ref: '#/definitions/models.UserRole'
      username:
        maxLength: 50
        minLength: 3
        type: string
    required:
    - dateOfBirth
    - email
    - fullName
    - gender
    - password
    - username
    type: object
  models.CreateUserResponse:
    properties:
      message:
        type: string
      user:
        $ref: '#/definitions/models.UserDetail'
    required:
    - message
    - user
    type: object
  models.Document:
    properties:
      author:
        type: string
      category:
        type: string
      classId:
        type: integer
      downloads:
        type: integer
      fileUrl:
        type: string
      id:
        type: integer
      subjectId:
        type: integer
      title:
        type: string
      views:
        type: integer
    required:
    - author
    - category
    - classId
    - downloads
    - fileUrl
    - id
    - subjectId
    - title
    - views
    type: object
  models.Error:
    properties:
      error:
        type: string
    required:
    - error
    type: object
  models.ForgotPasswordRequest:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  models.Lesson:
    properties:
      courseId:
        type: integer
      id:
        type: integer
      title:
        type: string
      videoUrl:
        type: string
    required:
    - courseId
    - id
    - title
    - videoUrl
    type: object
  models.LoginRequest:
    properties:
      identifier:
        type: string
      password:
        type: string
    required:
    - identifier
    - password
    type: object
  models.LoginResponse:
    properties:
      accessToken:
        type: string
      expiresIn:
        type: integer
      message:
        type: string
      user:
        $ref: '#/definitions/models.UserDetail'
    required:
    - accessToken
    - expiresIn
    - message
    - user
    type: object
  models.Message:
    properties:
      message:
        type: string
    required:
    - message
    type: object
  models.Paging:
    properties:
      limit:
        type: integer
      page:
        type: integer
      total:
        type: integer
    required:
    - limit
    - page
    - total
    type: object
  models.PasswordUpdateRequest:
    properties:
      currentPassword:
        minLength: 6
        type: string
      newPassword:
        minLength: 6
        type: string
    required:
    - currentPassword
    - newPassword
    type: object
  models.ResetPasswordRequest:
    properties:
      password:
        minLength: 6
        type: string
    required:
    - password
    type: object
  models.Subject:
    properties:
      count:
        type: integer
      id:
        type: integer
      name:
        type: string
    required:
    - count
    - id
    - name
    type: object
  models.UpdateUserResponse:
    properties:
      message:
        type: string
      user:
        $ref: '#/definitions/models.UserDetail'
    required:
    - message
    - user
    type: object
  models.UserDetail:
    properties:
      avatar:
        type: string
      dateOfBirth:
        type: string
      email:
        type: string
      fullName:
        type: string
      gender:
        $ref: '#/definitions/models.UserGender'
      id:
        type: integer
      role:
        $ref: '#/definitions/models.UserRole'
      username:
        type: string
    required:
    - dateOfBirth
    - email
    - fullName
    - gender
    - id
    - role
    - username
    type: object
  models.UserGender:
    enum:
    - female
    - male
    - other
    type: string
    x-enum-varnames:
    - GenderFemale
    - GenderMale
    - GenderOther
  models.UserListResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/models.UserDetail'
        type: array
      paging:
        $ref: '#/definitions/models.Paging'
    required:
    - data
    - paging
    type: object
  models.UserRole:
    enum:
    - user
    - admin
    type: string
    x-enum-varnames:
    - RoleUser
    - RoleAdmin
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is an online learning API server.
  termsOfService: http://swagger.io/terms/
  title: Online Learning API
  version: "1.0"
paths:
  /auth/forgot-password:
    post:
      consumes:
      - application/json
      description: Send a password reset link to the user's email
      parameters:
      - description: User email
        in: body
        name: email
        required: true
        schema:
          $ref: '#/definitions/models.ForgotPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Message'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/models.Error'
      summary: Request password reset
      tags:
      - Authentication
  /auth/login:
    post:
      consumes:
      - application/json
      description: Log in using email or username and password
      parameters:
      - description: Login credentials
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.LoginResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/models.Error'
        "401":
          description: Authentication failed
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/models.Error'
      summary: Log in
      tags:
      - Authentication
  /auth/logout:
    post:
      description: Log out by clearing the refresh token and invalidating the session
      produces:
      - application/json
      responses:
        "200":
          description: Logout successful
          schema:
            $ref: '#/definitions/models.Message'
        "401":
          description: No refresh token found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Log out
      tags:
      - Authentication
  /auth/refresh-token:
    post:
      description: Refresh both access token and refresh token
      produces:
      - application/json
      responses:
        "200":
          description: Returns new access token and sets new refresh token cookie
          schema:
            $ref: '#/definitions/models.AccessTokenResponse'
        "400":
          description: Invalid user ID
          schema:
            $ref: '#/definitions/models.Error'
        "401":
          description: Invalid or missing refresh token
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/models.Error'
      summary: Refresh access token
      tags:
      - Authentication
  /auth/reset-password:
    post:
      consumes:
      - application/json
      description: Reset the user's password using a valid token
      parameters:
      - description: Reset token
        in: query
        name: token
        required: true
        type: string
      - description: New password
        in: body
        name: password
        required: true
        schema:
          $ref: '#/definitions/models.ResetPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Message'
        "400":
          description: Invalid request or password
          schema:
            $ref: '#/definitions/models.Error'
        "401":
          description: Invalid or expired token
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/models.Error'
      summary: Reset user password
      tags:
      - Authentication
  /contacts/:
    post:
      description: Send email contact
      parameters:
      - description: Send email
        in: body
        name: contact
        required: true
        schema:
          $ref: '#/definitions/models.Contact'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Message'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      summary: Send email contact
      tags:
      - Contact
  /courses/:
    get:
      description: Retrieve a list of all courses with optional filtering and pagination
      parameters:
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Items per page (default: 10)'
        in: query
        name: limit
        type: integer
      - description: Filter by subject ID
        in: query
        name: subject
        type: integer
      - description: Search in title and description
        in: query
        name: search
        type: string
      - description: 'Sort field (title, price) (default: id)'
        in: query
        name: sort
        type: string
      - description: 'Sort order (asc, desc) (default: asc)'
        in: query
        name: order
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.CourseListResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      summary: Get all courses
      tags:
      - Course
    post:
      consumes:
      - multipart/form-data
      description: Create a new course with the provided details
      parameters:
      - description: Subject ID
        in: formData
        name: subjectId
        required: true
        type: integer
      - description: Course Title
        in: formData
        name: title
        required: true
        type: string
      - description: Course Description
        in: formData
        name: description
        required: true
        type: string
      - description: Course Price
        in: formData
        name: price
        required: true
        type: number
      - description: Instructor Name
        in: formData
        name: instructor
        required: true
        type: string
      - description: Thumbnail Image
        in: formData
        name: thumbnail
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Course'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      summary: Create a new course
      tags:
      - Course
  /courses/{id}:
    delete:
      description: Delete a course by ID
      parameters:
      - description: Course ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Message'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      summary: Delete a course
      tags:
      - Course
    get:
      description: Retrieve a single course using its ID
      parameters:
      - description: Course ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Course'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      summary: Get a course by ID
      tags:
      - Course
    put:
      consumes:
      - multipart/form-data
      description: Update course details by ID
      parameters:
      - description: Course ID
        in: path
        name: id
        required: true
        type: integer
      - description: Subject ID
        in: formData
        name: subjectId
        type: integer
      - description: Course Title
        in: formData
        name: title
        type: string
      - description: Course Description
        in: formData
        name: description
        type: string
      - description: Course Price
        in: formData
        name: price
        type: number
      - description: Instructor Name
        in: formData
        name: instructor
        type: string
      - description: Thumbnail Image
        in: formData
        name: thumbnail
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Course'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      summary: Update an existing course
      tags:
      - Course
  /documents/:
    get:
      description: Returns a list of documents, which can be filtered by `subjectId`
        and `title`. Limits the number of returned documents using the `limit` parameter.
      parameters:
      - default: 40
        description: Limit the number of documents returned
        in: query
        name: limit
        type: integer
      - description: Subject ID
        in: query
        name: subjectId
        type: integer
      - description: Document title (searched using LIKE)
        in: query
        name: title
        type: string
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Document'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      summary: Retrieve document list
      tags:
      - Document
    post:
      description: Upload document file
      parameters:
      - description: Subject ID
        in: formData
        name: subjectId
        required: true
        type: integer
      - description: Document title
        in: formData
        name: title
        required: true
        type: string
      - description: Document author
        in: formData
        name: author
        type: string
      - description: File to upload
        in: formData
        name: file
        required: true
        type: file
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Message'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - BearerAuth: []
      summary: Upload document file
      tags:
      - Document
  /documents/{id}:
    delete:
      description: Delete a document by document ID
      parameters:
      - description: Document ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Message'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - BearerAuth: []
      summary: Delete document
      tags:
      - Document
    put:
      description: Update a document's information and optionally replace its file
        by document ID
      parameters:
      - description: Document ID
        in: path
        name: id
        required: true
        type: integer
      - description: Document title
        in: formData
        name: title
        type: string
      - description: Document author
        in: formData
        name: author
        type: string
      - description: Number of views
        in: formData
        name: views
        type: integer
      - description: Number of downloads
        in: formData
        name: downloads
        type: integer
      - description: File to replace the existing document file
        in: formData
        name: file
        type: file
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Message'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - BearerAuth: []
      summary: Update a document, including replacing its file
      tags:
      - Document
  /documents/classes:
    get:
      description: List of classes with their subjects and document counts
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Class'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      summary: List of classes with their subjects and document counts
      tags:
      - Document
  /lessons/:
    post:
      consumes:
      - application/json
      description: Create a new lesson with video upload
      parameters:
      - description: Course ID
        in: formData
        name: courseId
        required: true
        type: integer
      - description: Lesson Title
        in: formData
        name: title
        required: true
        type: string
      - description: Video File
        in: formData
        name: video
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Lesson'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - BearerAuth: []
      summary: Create a new lesson
      tags:
      - Lesson
  /lessons/{id}:
    delete:
      description: Delete a lesson by ID
      parameters:
      - description: Lesson ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Message'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - BearerAuth: []
      summary: Delete an existing lesson
      tags:
      - Lesson
    put:
      consumes:
      - application/json
      description: Update the title and video of a lesson
      parameters:
      - description: Lesson ID
        in: path
        name: id
        required: true
        type: integer
      - description: Lesson Title
        in: formData
        name: title
        type: string
      - description: Video File
        in: formData
        name: video
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Lesson'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - BearerAuth: []
      summary: Update an existing lesson
      tags:
      - Lesson
  /users/:
    get:
      description: Retrieve a list of all users, with optional filters for email,
        username, full name, date of birth, role, and pagination.
      parameters:
      - in: query
        name: dateOfBirth
        type: string
      - in: query
        name: email
        type: string
      - in: query
        name: fullName
        type: string
      - in: query
        maximum: 100
        minimum: 1
        name: limit
        type: integer
      - in: query
        minimum: 1
        name: page
        type: integer
      - in: query
        name: role
        type: string
      - in: query
        name: username
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserListResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - BearerAuth: []
      summary: Get all users
      tags:
      - User
    post:
      consumes:
      - application/json
      description: Register a new user with email, username, and password
      parameters:
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.CreateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.CreateUserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/models.Error'
      summary: Register a new regular user
      tags:
      - User
  /users/{id}:
    delete:
      description: Soft delete a user by user ID. Only admins can delete users, and
        admins cannot delete their own account.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Message'
        "403":
          description: Permission denied or trying to delete own account
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - BearerAuth: []
      summary: Delete user
      tags:
      - User
    get:
      description: Retrieve user information by user ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserDetail'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - BearerAuth: []
      summary: Get user by ID
      tags:
      - User
    put:
      consumes:
      - application/json
      description: Update user information by user ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UserDetail'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UpdateUserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - BearerAuth: []
      summary: Update user information
      tags:
      - User
  /users/{id}/avatar:
    put:
      consumes:
      - multipart/form-data
      description: Update the avatar for a specific user. Users can update their own
        avatar, admins can update any user's avatar
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User Avatar
        in: formData
        name: avatar
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UpdateUserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - BearerAuth: []
      summary: Update user avatar
      tags:
      - User
  /users/{id}/password:
    put:
      consumes:
      - application/json
      description: Change the user's password. Users can change their own password,
        admins can change any user's password
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Password data
        in: body
        name: password
        required: true
        schema:
          $ref: '#/definitions/models.PasswordUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Message'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - BearerAuth: []
      summary: Change user password
      tags:
      - User
  /users/admin:
    post:
      consumes:
      - application/json
      description: Register a new user with email, username, and password
      parameters:
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.CreateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.CreateUserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/models.Error'
      summary: Register a new user
      tags:
      - User
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
