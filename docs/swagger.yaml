basePath: /api/v1
definitions:
  models.AccessTokenReponse:
    properties:
      accessToken:
        type: string
    type: object
  models.ChangePasswordRequest:
    properties:
      currentPassword:
        type: string
      newPassword:
        type: string
    type: object
  models.Error:
    properties:
      error:
        type: string
    type: object
  models.ForgotPasswordRequest:
    properties:
      email:
        type: string
    type: object
  models.LoginRequest:
    properties:
      identifier:
        type: string
      password:
        type: string
    type: object
  models.LoginResponse:
    properties:
      accessToken:
        type: string
      message:
        type: string
      user:
        $ref: '#/definitions/models.UserDetail'
    type: object
  models.Message:
    properties:
      message:
        type: string
    type: object
  models.ResetPasswordRequest:
    properties:
      password:
        type: string
    type: object
  models.SignUpRequest:
    properties:
      email:
        type: string
      fullName:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  models.UserDetail:
    properties:
      email:
        type: string
      fullName:
        type: string
      id:
        type: integer
      username:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is an online learning API server.
  termsOfService: http://swagger.io/terms/
  title: Online Learning API
  version: "1.0"
paths:
  /user/:
    get:
      description: Retrieve a list of all users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.UserDetail'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - BearerAuth: []
      summary: Get all users
      tags:
      - users
  /user/{user_id}:
    delete:
      description: Soft delete a user by user ID
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Message'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - BearerAuth: []
      summary: Soft delete user
      tags:
      - users
    get:
      description: Retrieve user information by user ID
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserDetail'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - BearerAuth: []
      summary: Get user by ID
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update user information by user ID
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: integer
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UserDetail'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Message'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - BearerAuth: []
      summary: Update user information
      tags:
      - users
  /user/{user_id}/change-password:
    put:
      consumes:
      - application/json
      description: Change the user's password
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: integer
      - description: Password data
        in: body
        name: password
        required: true
        schema:
          $ref: '#/definitions/models.ChangePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Message'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - BearerAuth: []
      summary: Change user password
      tags:
      - users
  /user/forgot-password:
    post:
      consumes:
      - application/json
      description: Send a password reset link to the user's email
      parameters:
      - description: User email
        in: body
        name: email
        required: true
        schema:
          $ref: '#/definitions/models.ForgotPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Message'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Request password reset
      tags:
      - users
  /user/login:
    post:
      consumes:
      - application/json
      description: Log in a user using email or username and password
      parameters:
      - description: Login credentials
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
      summary: Log in an existing user
      tags:
      - users
  /user/logout:
    post:
      description: Log out the user by clearing the refresh token
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Message'
      summary: Log out the user
      tags:
      - users
  /user/refresh:
    post:
      description: Refresh the access token using the refresh token
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.AccessTokenReponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
      summary: Refresh access token
      tags:
      - users
  /user/reset-password:
    post:
      consumes:
      - application/json
      description: Reset the user's password using a valid token
      parameters:
      - description: Reset token
        in: query
        name: token
        required: true
        type: string
      - description: New password
        in: body
        name: password
        required: true
        schema:
          $ref: '#/definitions/models.ResetPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Message'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
      summary: Reset user password
      tags:
      - users
  /user/signup:
    post:
      consumes:
      - application/json
      description: Register a new user with email, username, and password
      parameters:
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.SignUpRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Message'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/models.Error'
      summary: Register a new user
      tags:
      - users
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
